# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Initialize a set to keep track of seen values
        seen = set()
        # Create a dummy node to handle edge cases easily
        dummy = ListNode(-1)
        # Pointer for the new linked list
        current = dummy
        
        # Traverse the original list
        while head:
            # If the value has not been seen before
            if head.val not in seen:
                seen.add(head.val)
                # Add the unique value to the new list
                current.next = ListNode(head.val)
                current = current.next
            # Move to the next node
            head = head.next
        
        # Return the next of the dummy node which points to the head of the new list
        return dummy.next
#more optimise

// class Solution:
//     def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
//         # If the list is empty or has only one element, return it as is
//         if not head or not head.next:
//             return head
        
//         # Start with the head of the list
//         current = head
        
//         # Traverse the list
//         while current and current.next:
//             # If the current node value is the same as the next node value
//             if current.val == current.next.val:
//                 # Skip the next node by pointing to the next of next node
//                 current.next = current.next.next
//             else:
//                 # Move to the next node
//                 current = current.next
        
//         return head
